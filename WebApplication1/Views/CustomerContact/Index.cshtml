@model IEnumerable<WebApplication1.Models.客戶聯絡人>

@{
    ViewBag.Title = "Index";
}

<h2>Index</h2>

<form method="get">

    <label>客戶ID：</label><input type="text" name="客戶ID">
    <label>職稱：</label><input type="text" name="職稱">
    <label>姓名：</label><input type="text" name="姓名">
    <label>email：</label><input type="text" name="email">
    <label>手機：</label><input type="text" name="手機">
    <label>電話：</label><input type="text" name="電話">
    <label>刪除註記：</label><input type="checkbox" name="刪除註記" value="true">
    <input type="hidden" name="刪除註記" value="false">
    <button class="btn btn-info" type="submit">查詢</button>
</form>

<p>
    @Html.ActionLink("Create New", "Create")
</p>

<table class="table">
    <tr>
        <th onclick="sortTable(0)">
            @Html.DisplayNameFor(model => model.職稱)
        </th>
        <th onclick="sortTable(1)">
            @Html.DisplayNameFor(model => model.姓名)
        </th>
        <th onclick="sortTable(2)">
            @Html.DisplayNameFor(model => model.Email)
        </th>
        <th onclick="sortTable(3)">
            @Html.DisplayNameFor(model => model.手機)
        </th>
        <th onclick="sortTable(4)">
            @Html.DisplayNameFor(model => model.電話)
        </th>
        <th onclick="sortTable(5)">
            @Html.DisplayNameFor(model => model.客戶資料.客戶名稱)
        </th>
        <th onclick="sortTable(6)">
            @Html.DisplayNameFor(model => model.刪除註記)
        </th>
        <th></th>
    </tr>

    @foreach (var item in Model)
    {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.職稱)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.姓名)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Email)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.手機)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.電話)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.客戶資料.客戶名稱)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.刪除註記)
            </td>
            <td>
                @Html.ActionLink("Edit", "Edit", new { id = item.Id }) |
                @Html.ActionLink("Details", "Details", new { id = item.Id }) |
                @Html.ActionLink("Delete", "Delete", new { id = item.Id })
            </td>
        </tr>
    }

</table>
<script>
    function sortTable(n) {
        var table, rows, switching, i, x, y, shouldSwitch, dir, switchcount = 0;
        table = document.getElementsByClassName("table")[0];
        switching = true;
        // Set the sorting direction to ascending:
        dir = "asc";
        /* Make a loop that will continue until
        no switching has been done: */
        while (switching) {
            // Start by saying: no switching is done:
            switching = false;
            rows = table.getElementsByTagName("tr");
            /* Loop through all table rows (except the
            first, which contains table headers): */
            for (i = 1; i < (rows.length - 1) ; i++) {
                // Start by saying there should be no switching:
                shouldSwitch = false;
                /* Get the two elements you want to compare,
                one from current row and one from the next: */
                x = rows[i].getElementsByTagName("td")[n];
                y = rows[i + 1].getElementsByTagName("td")[n];
                /* Check if the two rows should switch place,
                based on the direction, asc or desc: */
                if (dir == "asc") {
                    if (x.innerHTML.toLowerCase() > y.innerHTML.toLowerCase()) {
                        // If so, mark as a switch and break the loop:
                        shouldSwitch = true;
                        break;
                    }
                } else if (dir == "desc") {
                    if (x.innerHTML.toLowerCase() < y.innerHTML.toLowerCase()) {
                        // If so, mark as a switch and break the loop:
                        shouldSwitch = true;
                        break;
                    }
                }
            }
            if (shouldSwitch) {
                /* If a switch has been marked, make the switch
                and mark that a switch has been done: */
                rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
                switching = true;
                // Each time a switch is done, increase this count by 1:
                switchcount++;
            } else {
                /* If no switching has been done AND the direction is "asc",
                set the direction to "desc" and run the while loop again. */
                if (switchcount == 0 && dir == "asc") {
                    dir = "desc";
                    switching = true;
                }
            }
        }
    }
</script>